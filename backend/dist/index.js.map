{"version":3,"sources":["../index.ts","../src/database/connection.ts","../src/database/modules/controllers/routes/userRoute.ts","../src/database/models/usermodel.ts","../src/database/models/agentmodels.ts","../src/database/models/agentaddslot.ts","../src/database/models/userbooking.ts","../Helper/passwordhash.ts","../src/database/modules/controllers/repositories/userREpository.ts","../src/database/models/transactionmodel.ts","../src/database/modules/controllers/services/userServices.ts","../src/database/modules/controllers/usercontroller.ts","../Helper/mailOtp.ts","../Helper/cloudinary.ts","../Helper/razorpayConfig.ts","../Helper/customError.ts","../src/database/models/chatmodel.ts","../src/database/models/messagemodel.ts","../src/database/modules/controllers/repositories/chatRepository.ts","../src/database/modules/controllers/services/chatservice.ts","../src/database/modules/controllers/chatController.ts","../midlewares/userauth.ts","../Helper/multer.ts","../src/database/modules/controllers/routes/agentRoute.ts","../src/database/modules/controllers/agentController.ts","../src/database/modules/controllers/repositories/agentRepository.ts","../src/database/modules/controllers/services/agentService.ts","../src/database/modules/controllers/routes/adminRoute.ts","../src/database/models/adminmodel.ts","../src/database/modules/controllers/repositories/adminRepository.ts","../src/database/modules/controllers/services/adminService.ts","../src/database/modules/controllers/adminController.ts","../midlewares/adminauth.ts","../midlewares/errorhandling.ts"],"sourcesContent":["import express, { Request, Response, Application } from 'express';\nimport http from 'http';\nimport { Server as SocketIOServer, Socket } from 'socket.io';\nimport dotenv from 'dotenv';\nimport cors from 'cors';\nimport path from 'path';\nimport connectToDatabase from '../backend/src/database/connection';\nimport router from '../backend/src/database/modules/controllers/routes/userRoute';\nimport agentRouter from '../backend/src/database/modules/controllers/routes/agentRoute';\nimport adminRouter from '../backend/src/database/modules/controllers/routes/adminRoute';\nimport errorHandlingMiddleware from './midlewares/errorhandling';\nimport connection from '../backend/src/database/connection';\n\ndotenv.config();\n\nconst app: Application = express();\nconst server = http.createServer(app);\n\n// Initialize Socket.IO with CORS options\nconst io = new SocketIOServer(server, {\n  pingTimeout:10000,\n  cors: {\n    origin: \"http://localhost:4200\",\n  },\n});\n\n// Middleware\napp.use(express.json());\napp.use(cors({ origin: 'http://localhost:4200' }));\napp.use('/image', express.static(path.join(__dirname, 'image')));\napp.use(errorHandlingMiddleware);\n\n// Routes\napp.use('/users', router);\napp.use('/agents', agentRouter);\napp.use('/admin', adminRouter);\n\nio.on('connection', (socket) => {\n  console.log('A user connected');\n\n  socket.on(\"newMessage\",(data)=>{\n    io.emit(\"messageReceived\", data);\n  })\n  {\n\n  }\n\n  \n});\n\n\n// Server\nconst PORT = process.env.PORT || 5000;\nserver.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n\n// Database connection\nconnectToDatabase();\n","import mongoose from \"mongoose\";\nimport dotenv from 'dotenv'\ndotenv.config();\nconst MONGO_URL:string   = process.env.DB_URI || \"\"\n\nif(!MONGO_URL){\n    console.log(\"mongo db url connection is not defined\");\n    process.exit(1)\n    \n}\nexport default function connectToDatabase () {\n    console.log(process.env.DB_URI)\n    mongoose.connect(MONGO_URL)\n    .then(() => console.log('Connected to MongoDB'))\n    .catch(error => console.error('Error connecting to MongoDB:', error));\n};\n\n","import express from 'express';\nimport { UserController } from '../usercontroller';\nimport { chatController} from \"../chatController\"\nimport userAuth from \"../../../../../midlewares/userauth\"\nimport upload from '../../../../../Helper/multer';\n\nconst router = express.Router();\nconst userController = new UserController();\nconst chatcontroller=new chatController()\n\nrouter.post('/userregister',userAuth,upload.single('image'), userController.registerUser);\nrouter.post(\"/userlogin\",userController.userlogin)\nrouter.post(\"/verifyotp\",userController.verifyotp)\nrouter.post(\"/userslotbooking\",userAuth,userController.userslotbooking)\nrouter.post(\"/paymentVerification\",userAuth,userController.paymentVerification)\n\nrouter.get(\"/getVerifiedagents\",userAuth,userController.getVerifiedagents)\nrouter.get(\"/showavailableslots/:agentId\",userAuth,userController.agentAvailableSlots)\nrouter.get(\"/agentCategory\",userController.agentCategory)\nrouter.get(\"/getagentByName\",userController.getagentByName);\nrouter.get(\"/getUserById\",userController.getUserById)\nrouter.get(\"/userbookings\",userAuth,userController.userbookings);\nrouter.get(\"/getKey\",userController.getKey)\n\nrouter.patch(\"/cancelbooking\",userAuth,userController.cancelbooking)\n\nrouter.post(\"/editUser\",userAuth,upload.single('image'),userController.editUser);\nrouter.post(\"/refreshtoken\",userController.refreshtoken)\n\n//chat routes\nrouter.post(\"/accessChat\",chatcontroller.accessChat)\nrouter.get(\"/fetchChats\",chatcontroller.fetchChats)\nrouter.post(\"/sendMessage\",chatcontroller.sendMessage)\nrouter.get(\"/allMessages\",chatcontroller.allMessages)\n\n// transaction details\nrouter.get(\"/userTransactionHistory\",userController.userTransactionHistory)\nrouter.post(\"/walletpayment\",userController.walletpayment)\n\nexport default router;\n","import mongoose, { Document, Model } from \"mongoose\";\nexport interface UserDocument extends Document {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  otp: Number;\n  otp_updated_at: Date;\n  is_verified: boolean;\n  role: string;\n  is_blocked: boolean;\n  image: string;\n  certificate: string;\n  category: string;\n  position: string;\n  wallet:number\n}\n\nconst userSchema = new mongoose.Schema<UserDocument>({\n  firstName: {\n    type: String,\n  },\n  lastName: {\n    type: String,\n  },\n  email: {\n    type: String,\n  },\n  password: {\n    type: String,\n  },\n  otp: {\n    type: Number,\n    default: 500,\n  },\n  otp_updated_at: {\n    type: Date,\n  },\n  is_verified: {\n    type: Boolean,\n    default: false,\n  },\n  role: {\n    type: String,\n    default: \"user\",\n  },\n  is_blocked: {\n    type: Boolean,\n    default: false,\n  },\n  image: {\n    type: String,\n    default: \"\",\n  },\n  certificate: {\n    type: String,\n  },\n  category: {\n    type: String,\n  },\n  position: {\n    type: String,\n  },\n  wallet:{\n    type:Number,\n    default:0\n  }\n});\n\nconst usersModel: Model<UserDocument> = mongoose.model(\n  \"userSchema\",\n  userSchema\n);\n\n\n\nexport default usersModel;\n","\nimport { ObjectId } from 'mongodb';\nimport mongoose, { Document, Model } from 'mongoose';\nexport interface AgentDocument extends Document {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password:string;\n    confirmPassword:string;\n    otp:Number;\n    otp_updated_at:Date;\n    is_verified:boolean;\n    role:string;\n    is_blocked:boolean;\n    image:string;\n    certificate:string;\n    category:string;\n    experience:string;\n    clubConnections:String\n\n\n}\n\nconst agentSchema = new mongoose.Schema<AgentDocument>({\n   firstName: {\n      type: String,\n    },\n    lastName: {\n      type: String,\n    },\n    email: {\n      type: String,\n    },\n    password: {\n      type: String,\n    },\n    otp: {\n      type: Number,\n      default:500,\n    },\n    otp_updated_at: {\n      type: Date,\n    },\n    is_verified: {\n      type: Boolean,\n      default: false,\n    },\n    role: {\n      type: String,\n      default: \"agent\",\n    },\n    is_blocked: {\n      type: Boolean,\n      default: false,\n    },\n    image:{\n      type:String,\n      default:''\n    },\n    certificate:{\n        type:String\n    },\n    category:{\n        type:String\n    },\n    experience:{\n        type:String\n    },\n    clubConnections:{\n      type:String\n    }\n   \n\n  });\n  \n\n  \n\n\n\n  const  agentModel : Model<AgentDocument>= mongoose.model(\"agentSchema\", agentSchema);\n  export default agentModel","import mongoose, { Schema, Document } from 'mongoose';\n\n// interface slotaddinterface extends Document {\n//   agentId: mongoose.Types.ObjectId;\n//   date: Date;\n//   time: string;\n//   booked:boolean;\n//   bookedUserId:mongoose.Types.ObjectId;\n//   adminpaidAmount:string\n\n\n// }\n\nconst agentslotadd: Schema = new Schema({\n  agentId: {\n    type: Schema.Types.ObjectId,\n    ref: 'agentSchema',\n    required: true,\n  },\n  date: {\n    type: Date,\n    default: Date.now,\n  \n  },\n \n  time: {\n    type: String,\n  },\n  booked:{\n    type:Boolean,\n    default:false\n  },\n  status:{\n    type:String,\n    default:\"pending\"\n  },\n bookedUserId:{\n  type: Schema.Types.ObjectId,\n  ref:'userSchema'\n },\n paymentstatus:{\n  type:String\n },\n bookingAmount:{\n  type:String,\n  default:'1500'\n },\n adminpaidAmount:{\n  type:String\n }\n\n});\n\nconst addagentslot = mongoose.model<any>('agentslotadd', agentslotadd);\n\nexport default addagentslot;\n","import mongoose, { Document, Model, Schema } from \"mongoose\";\nexport interface userBookingDocument extends Document {\n  slotId: mongoose.Types.ObjectId;\n  agentId: mongoose.Types.ObjectId;\n  userId: mongoose.Types.ObjectId;\n  time: string;\n  date: Date;\n  status: string;\n  paymentId:string;\n  refundamount:string;\n  bookingamount:string \n}\n\nconst userBookinSchema = new mongoose.Schema<userBookingDocument>({\n  slotId: {\n    type: Schema.Types.ObjectId,\n  },\n  agentId: {\n    type: Schema.Types.ObjectId,\n    ref:'agentSchema'\n  },\n  userId: {\n    type: Schema.Types.ObjectId,\n  },\n  time: {\n    type: String,\n  },\n  date: {\n    type: Date,\n  },\n  status: {\n    type: String,\n    default:\"confirmed\"\n  },\n  paymentId:{\n    type:String\n  },\n  \n  bookingamount:{\n    type:String \n  },\n  refundamount:{\n    type:String\n  }\n});\n\nconst userBookingModel: Model<userBookingDocument> = mongoose.model(\n  \"userBookinSchema\",\n  userBookinSchema\n);\nexport default userBookingModel;\n","import bcrypt from 'bcrypt';\n\nexport const hashedPass = async (password: string): Promise<string> => {\n    try {\n        const hashedPass = await bcrypt.hash(password, 10);\n        return hashedPass;\n    } catch (error:any) {\n        console.log(error.message);\n        throw new Error('Error hashing password');\n    }\n};\n\nexport  const comparePass = async (password: string, hashedPass: string): Promise<boolean> => {\n    try {\n        const match = await bcrypt.compare(password, hashedPass);\n        return match;\n    } catch (error:any) {\n        console.log(error.message);\n        throw new Error('Error comparing passwords');\n    }\n};\n","import usersModel from \"../../../models/usermodel\";\nimport agentModel from \"../../../models/agentmodels\";\nimport addagentslot from \"../../../models/agentaddslot\";\nimport userBookingModel from \"../../../models/userbooking\";\nimport { UserDto,userBookingDocument } from \"../dtos/userDto\";\nimport { comparePass } from \"../../../../../Helper/passwordhash\";\nimport jwt from \"jsonwebtoken\";\nimport dotenv from \"dotenv\";\nimport { Secret } from \"jsonwebtoken\";\nimport transactionmodel from \"../../../models/transactionmodel\";\n\n\ndotenv.config();\n\nconst jwtSecretToken: Secret = process.env.jwtsecrettoken as string;\nconst jwtrefreshtoken: Secret =process.env.jwtrefreshtoken as string;\nlet email:string=''\n// creating a userRepository class\nexport class UserRepository {\n  async create(userData: UserDto): Promise<any> {\n    try {\n      return await usersModel.create(userData);\n    } catch (error) {\n      throw new Error(\"Could not create user\");\n    }\n  }\n\n  //  getting user\n\n  async getUser(data: any): Promise<any> {\n    try {\n      let info: any = await usersModel.findOne({ email: data.email });\n      if (!info) {\n        return null;\n      }\n\n      let isValidPassword = await comparePass(data.password, info.password);\n      if (!isValidPassword) {\n        return \"password mismatch\";\n      } else {\n        if (info.is_blocked) {\n          return \"you are blocked by the admin\";\n        }\n        email=info.email\n        const refreshtoken=jwt.sign({email:info.email}, jwtrefreshtoken,{expiresIn:'1d'})\n        const token = jwt.sign({email:info.email}, jwtSecretToken,{expiresIn:'20s'});\n        const accesseduser = {\n          usertoken: token,\n          refreshtoken:refreshtoken,\n          userdetails: {\n            id: info._id,\n            name: info.firstName,\n            email: info.email,\n            image: info.image,\n            category: info.category,\n            role: info.role,\n          },\n        };\n        return accesseduser;\n      }\n    } catch (error: any) {\n      throw new Error(\"Could not find user\");\n    }\n  }\n\n  // getting new token data after token expiry\n  async refreshtoken(data: any) {\n    try {\n      let { refreshtoken } = data;\n  \n      return new Promise((resolve, reject) => {\n        jwt.verify(refreshtoken, jwtrefreshtoken, (err: any, decoded: any) => {\n          if (err) {\n            // Wrong Refresh Token\n            reject(err);\n          } else {\n            // Correct token, generate new tokens\n            const newRefreshtoken = jwt.sign({ email: decoded.email }, jwtrefreshtoken, { expiresIn: '1d' });\n            const newAccessToken = jwt.sign({ email: decoded.email }, jwtSecretToken, { expiresIn: '20s' });\n            const accesseduser = {\n              token: newAccessToken,\n              refreshtoken: newRefreshtoken,\n            };\n            resolve(accesseduser);\n          }\n        });\n      });\n    } catch (error: any) {\n      throw new Error(error);\n    }\n  }\n  //  fetching user details\n\n  async getUserdetails(email: string) {\n    try {\n      let userdata = await usersModel.find({ email: email });\n      return userdata;\n    } catch (error: any) {\n      throw new Error(error.message);\n    }\n  }\n\n  // verifying otp\n\n  async verifyotp(email: string) {\n    try {\n      let userdata = await usersModel.find({ email: email });\n      return userdata;\n    } catch (error: any) {\n      throw new Error(error.message);\n    }\n  }\n  // confirming the email verification\n\n  async successVerify(email: string) {\n    try {\n      let userdata = await usersModel.find({ email: email });\n      userdata[0].is_verified = true;\n      const updatedUser = await userdata[0].save();\n    } catch (error: any) {\n      throw new Error(error.message);\n    }\n  }\n  // fetching and sending only the verified agents\n\n  async getVerifiedagents() {\n    try {\n      return agentModel.find({ is_verified: true ,is_blocked:false});\n    } catch (error: any) {\n      throw new Error(error.message);\n    }\n  }\n  // sending all the available slots to the user\n  async agentAvailableSlots(id: any) {\n    try {\n      return await addagentslot.find({ agentId: id });\n    } catch {\n      throw new Error(\"error fetching data\");\n    }\n  }\n  // wallet booking by wallet payment\n \n\n  // adding user booking details\n\n  async userslotbooking(data: userBookingDocument) {\n    try {\n     \n      await addagentslot.updateOne(\n        { _id: data.slotId },\n        { $set: { bookedUserId: data.userId,booked:true,status:'Confirmed' } } \n      );\n      \n     await userBookingModel.create(data);\n     return addagentslot.find({agentId:data.agentId,booked:false,date:{$gt:new Date()}})\n     \n    } catch {\n      throw new Error(\"failed to add booking details\");\n    }\n  }\n\n  // fetching particuar agent category and sending the details\n  async agentCategory(type:string){\n    try{\n      return agentModel.find({category:type,  \"is_blocked\":'false',\n      \"is_verified\":\"true\"})\n    }catch{\n      throw new Error(\"error fetching data\")\n    }\n  }\n  \n  //fetching agents by name\n  async getagentByName(name:string){\n    try{\n      return await agentModel.find({ firstName: { $regex: `${name}` },\n      \"is_blocked\":'false',\n      \"is_verified\":\"true\"\n      \n       });\n      \n    }catch{\n      throw new Error(\"error fetching data\")\n    }\n  }\n  //fetching user by id\n  async getUserById(id:string){\n    try{\n      return await usersModel.find({_id:id})\n\n    }catch{\n      throw new Error(\"error fetching data\")\n    }\n   \n  }\n  \n\n  //fetching bookings based on status\n\n  async userbookings(status: string, id: string) {\n    try {\n       \n        if (status === 'All') {\n            let dta= await userBookingModel.find({ userId: id }).populate('agentId').exec();\n          \n            return dta\n            \n        } else {\n            let data = await userBookingModel.find({ userId: id, status: status }).populate('agentId').exec();\n            return data;\n        }\n\n    } catch (error) {\n        throw new Error(\"error fetching data\");\n    }\n}\n// cancel booking \n\nasync cancelbooking(id: string, userid: string, status: string, amountrefund: string,slotId:string) {\n  try {\n    await transactionmodel.create({userId:userid,agentId:id,refundamount:amountrefund})\n    let datas = await userBookingModel.findOne({ _id: id });\n\n    // Ensure datas?.bookingamount is properly cast to a number\n    let bookingAmount = datas?.bookingamount ? parseFloat(datas.bookingamount) : 0;\n    let refundAmount = parseFloat(amountrefund);\n\n    let finalamount: number = bookingAmount - refundAmount;\n    let adminpaymentamounut=Number(finalamount)/100*10\n    await addagentslot.updateOne({_id:slotId },{$set:{status:'cancelled',adminpaidAmount:adminpaymentamounut}})\n    await userBookingModel.updateOne({ _id: id }, { $set: { status: 'cancelled', refundamount: refundAmount,bookingamount:Number(finalamount)-adminpaymentamounut} });\n    let user=await usersModel.find({_id:userid})\n    let updatedamount=user[0].wallet+Number(amountrefund)\n    await usersModel.updateOne({_id:userid},{$set:{wallet:updatedamount}})\n    let data = await userBookingModel.find({ userId: userid, status: status }).populate('agentId').exec();\n\n    return data;\n  } catch (error) {\n    console.error(\"Error cancelling slot:\", error);\n    throw new Error(\"Error cancelling slot\");\n  }\n}\n\n\n//editing user and sending updated info to user\n\nasync editUser(data:any){\n  try{\n    if(data.image){\n  await usersModel.updateMany({_id:data.userId},{$set:{firstName:data.firstName,lastName:data.lastName,image:data.image}});\n  return usersModel.find({_id:data.userId})\n} else{\n  await usersModel.updateMany({_id:data.userId},{$set:{firstName:data.firstName,lastName:data.lastName}});\n  return usersModel.find({_id:data.userId})\n}  \n  }catch{\n    throw new Error(\"error fetching data\")\n}\n\n}\n\n// finding slot to cancel\nasync findCancellingSlot(id:string){\n  try{\n    return await userBookingModel.find({_id:id})\n  }catch(error:any){\n    throw new Error(error)\n  }\n}\n\n\nasync paymentSuccess(data:any,razorpay_payment_id:string){\n  try{\n    try {\n      \n      await addagentslot.updateOne(\n        { _id: data.slotId },\n        { $set: { bookedUserId: data.userId,booked:true,status:'Confirmed',paymentstatus:'paid' } } \n      );\n      data.paymentId=razorpay_payment_id\n      data.bookingamount=data.bookingamount\n      await transactionmodel.create({userId:data.userId,agentId:data.agentId,paidamount:data.bookingamount})\n     await userBookingModel.create(data);\n     return addagentslot.find({agentId:data.agentId,booked:false,date:{$gt:new Date()}}).populate(\"agentId\")\n     \n    } catch(error:any) {\n      throw new Error(error);\n    }\n  }catch{\n    throw new Error(\"error adding payment\")\n  }\n}\n\n generateRandomLetters(): string {\n  const letters = 'abcdefghijklmnopqrstuvwxyz'; // All letters of the alphabet\n  let randomString = '';\n  for (let i = 0; i < 12; i++) {\n      const randomIndex = Math.floor(Math.random() * letters.length); // Generate a random index\n      randomString += letters.charAt(randomIndex); // Append a random letter to the string\n  }\n  return randomString;\n}\n\n// Example usage:/ Output will be a random string of 12 letters\n\nasync walletpayment(data:any){\nconst randomPaymentId=this.generateRandomLetters()\n  data.paymentId=randomPaymentId\n  try{\n    let userdata:any=await usersModel.findOne({_id:data.userId})\n    if(userdata.wallet < data.bookingamount){\n      return {\" failure\":\"there is not enough wallet balance\"}\n    }\n  \n \n    await transactionmodel.create({userId:data.userId,agentId:data.agentId,paidamount:data.bookingamount, paymentMode:'wallet payment'})\n    await addagentslot.updateOne(\n      { _id: data.slotId },\n      { $set: { bookedUserId: data.userId,booked:true,status:'Confirmed',paymentstatus:'paid' } } \n    );\n    let balance:any=await usersModel.findOne({_id:data.userId})\n    let balanceamount=Number(balance.wallet)-Number(data.bookingamount)\n    await usersModel.updateOne({_id:data.userId},{$set:{wallet:balanceamount}})\n   await userBookingModel.create(data);\n   return addagentslot.find({agentId:data.agentId,booked:false,date:{$gt:new Date()}})\n    \n    \n  }catch(error:any){\n    throw new Error(error)\n  }\n}\n\nasync paymentfailure(data:any){\n  try{\n    try {\n\n      \n      await addagentslot.updateOne(\n        { _id: data.slotId },\n        { $set: { bookedUserId: data.userId,booked:true,status:'pending',paymentstatus:'failed' } } \n      );\n      \n     await userBookingModel.create(data);\n     return addagentslot.find({agentId:data.agentId,booked:false,date:{$gt:new Date()}})\n     \n    } catch {\n      throw new Error(\"failed to add booking details\");\n    }\n  }catch{\n    throw new Error(\"error adding payment\")\n  }\n}\n\n// getting transaction history\n\nasync userTransactionHistory(userId:string){\n  try{\n    let data=await transactionmodel.find({userId:userId}).populate(\"agentId\")\n    return data\n  }catch(error:any){\n    throw new Error(error)\n  }\n\n}\n}","import mongoose, { Model, Schema } from \"mongoose\";\nexport interface walletTransaction  {\n  userId: mongoose.Types.ObjectId;\n  agentId: mongoose.Types.ObjectId;\n  date: Date;\n  refundamount:string;\n  paidamount:string ;\n  paymentMode:string\n}\n\nconst transactioSchema = new mongoose.Schema<walletTransaction>({\nuserId: {\n        type: Schema.Types.ObjectId,\n      },\nagentId: {\n    type: Schema.Types.ObjectId,\n    ref:'agentSchema'\n  },\n \n  date: {\n    type: Date,\n  },\n  paidamount:{\n    type:String \n  },\n  refundamount:{\n    type:String\n  },\n  paymentMode:{\n    type:String,\n    defaulst:\"online\"\n  }\n  \n},\n{timestamps: true})\n;\n\nconst transactionmodel: Model<walletTransaction> = mongoose.model(\n  \"transactionmodel\",\n  transactioSchema\n);\n\nexport default transactionmodel;\n\n","import { UserRepository } from '../repositories/userREpository';\nimport { UserDto,userBookingDocument } from '../dtos/userDto';\n\n\nconst userRepository = new UserRepository();\n\nexport class UserService {\n  async registerUser(userData: UserDto): Promise<any> {\n    try {\n      return await userRepository.create(userData);\n    } catch (error) {\n      throw new Error('Could not register user');\n    }\n  }\n  async getuser(data:any){\n    try{\n      return await userRepository.getUser(data)\n    }catch(error:any){\n    throw new Error('Could not get user');\n  }\n  }\n  async userdetails(email:string){\n    try{\n      return await userRepository.getUserdetails(email)\n    }catch(error){\n      throw new Error('Could not get userdetails');\n    }\n  }\n  async verifyotp(email:string){\n    try{\n      return await userRepository.verifyotp(email)\n    }catch(error){\n      throw new Error('Could not get user');\n    }\n  }\n  async successVerify(email:string){\n    try{\n      return await userRepository.successVerify(email)\n    }catch(error){\n      throw new Error('Could not get user');\n    }\n  }\n  async getVerifiedagents(){\n    try{\n      return userRepository.getVerifiedagents()\n    }catch(error:any){\n      throw new Error(error.message)\n    }\n  }\n\n  //getting available slots\n\n  async agentAvailableSlots(id:any){\n    try{\n      return userRepository.agentAvailableSlots(id)\n    }catch{\n      throw new Error(\"error fetching slots\")\n    }\n   \n  }\n// sending back slot status false agents slots\n  async userslotbooking(data:userBookingDocument){\n    try{\n      return await userRepository.userslotbooking(data)\n    }catch{\n      throw new Error(\"error in adding user booking details\")\n    }\n  }\n  async agentCategory(item:string){\n    try{\n      return userRepository.agentCategory(item)\n    }catch{\n      throw new Error(\"error fetching data\")\n    }\n  }\n\n  //fetching agent by name \n\n  async getagentByName(item:string){\n    try{\n      return userRepository.getagentByName(item)\n    }catch{\n      throw new Error(\"error fetching data\")\n    }\n  }\n  async getUserById(id:any){\n    try{\n      return userRepository.getUserById(id)\n      \n    }catch{\n      throw new Error(\"error fetching data\")\n    }\n    \n  }\n  //walletpayment\n  async walletpayment(paymentdetail:userBookingDocument){\n    try{\n      return await userRepository.walletpayment(paymentdetail)\n    }catch(error:any){\n      throw new Error(error)\n    }\n  }\n  \n  //fetching userbooking information from userRepository \n  async userbookings(status:string,id:string){\n    try{\n      \n     return await userRepository.userbookings(status,id)\n    }catch{\n      throw new Error(\"error fetching data\")\n    }\n  }\n  // finding slot to cancell\n\n  async findCancellingSlot(id:string){\n    try{\n      return userRepository.findCancellingSlot(id)\n    }catch(error:any){\n      throw new Error(error);\n    }\n  }\n  //cancel booking \n  async cancelbooking(id:string,userid:string,status:string,amountrefund:string,slotId:string){\n    try{\n      return await userRepository.cancelbooking(id,userid,status,amountrefund,slotId)\n    }catch{\n      throw new Error(\"error cancelling slot\")\n    }\n  }\n\n  //updaing user and sending data\n  async editUser(data:any){\n    try{\n      return await userRepository.editUser(data)\n    }catch{\n      throw new Error(\"error updating user\")\n    }\n  }\n\n  async paymentSuccess(data:any,razorpay_payment_id:string){\n    try{\n      return await userRepository.paymentSuccess(data,razorpay_payment_id)\n    }catch{\n      throw new Error(\"error updating payment\")\n    }\n  }\n\n  //payment failure \n  async paymentfailure(data:any){\n    try{\n      return await userRepository.paymentfailure(data)\n    }catch{\n      throw new Error(\"error updating payment\")\n    }\n  }\n\n  // getting new token after token expiry \n  async refreshtoken(data:any){\n    try{\n    return userRepository.refreshtoken(data)\n\n    }catch(error:any){\n      throw new Error(error)\n    }\n  }\n\n  async userTransactionHistory(userId:string){\n    try{\n      return await userRepository.userTransactionHistory(userId)\n    }catch(error:any){\n      throw new Error(error)\n    }\n  }\n}","import { Request, Response, NextFunction } from \"express\";\nimport { UserService } from \"./services/userServices\";\nimport {\n  UserDto,\n  userlog,\n  userBookingDocument,\n  IBooking,\n  IcancelBooking,\n  IBookingCancel,\n} from \"./dtos/userDto\";\n\nimport bcrypt from \"bcrypt\";\nimport generateMail from \"../../../../Helper/mailOtp\";\nimport cloudinary from \"../../../../Helper/cloudinary\";\nimport { UserRepository } from \"./repositories/userREpository\";\nimport RazorpayInstance from \"../../../../Helper/razorpayConfig\";\nimport crypto from \"crypto\";\nimport CustomError from \"../../../../Helper/customError\";\n\nconst userService = new UserService();\nvar orderdata: IBooking;\n//user controller class\nexport class UserController {\n  //user Registrration\n\n  async registerUser(req: Request, res: Response, next: NextFunction) {\n    const folderName = \"Talent Track\";\n\n    try {\n      const userData: UserDto = req.body;\n\n\n      const userdetails = await userService.userdetails(userData.email);\n\n      if (userdetails.length > 0) {\n        return res.status(401).json(\"email already exist\");\n      } else {\n        let otp = await generateMail(userData.email);\n        userData.otp = otp as number;\n      }\n      const password = await bcrypt.hash(userData.password, 10);\n      userData.password = password;\n      if (req.file) {\n        const result = await cloudinary.uploader.upload(req.file.path, {\n          public_id: `${folderName}/${req.file.originalname}`,\n        });\n        userData.image = result.secure_url;\n      }\n      const newUser = await userService.registerUser(userData);\n      res.status(201).json(newUser);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  //user login\n\n  async userlogin(req: Request, res: Response, next: NextFunction) {\n    try {\n      const data = req.body;\n\n      const userdata = await userService.getuser(data);\n      if (!userdata) {\n        return res.status(401).json(\"invalid credentials\");\n      } else {\n        res.status(200).json(userdata);\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n  //user verifying otp\n\n  async verifyotp(req: Request, res: Response, next: NextFunction) {\n    try {\n      const data = req.body;\n\n      const verifyuser = await userService.verifyotp(data.email);\n      if (verifyuser[0].otp == data.otp) {\n        const succesverify = await userService.successVerify(data.email);\n        res.status(201).json(\"successfully verified\");\n      } else {\n        // res.status(404).json(\"entered otp doesnt match plaese try again\");\n        throw new CustomError(\"entered otp doesnt match plaese try again\", 401);\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n  async getVerifiedagents(req: Request, res: Response, next: NextFunction) {\n    try {\n      const data = await userService.getVerifiedagents();\n      res.status(200).json(data);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  //method get\n  //getting slot details\n  async agentAvailableSlots(req: Request, res: Response, next: NextFunction) {\n    try {\n      let id = req.params.agentId;\n      let data = await userService.agentAvailableSlots(id);\n      if (data.length > 0) {\n        res.status(200).json(data);\n      } else if (data.length == 0) {\n        res.status(200).json(\"there are np available slots\");\n      } else {\n        res.status(401).json(\"error fetching data\");\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  //getting Razorpay key\n  async getKey(req: Request, res: Response, next: NextFunction) {\n    res.status(200).json({ key: process.env.key_id });\n  }\n\n  // sending back slot status false slots to display it in the user for proceed booking information\n  // method get\n\n  async userslotbooking(req: Request, res: Response, next: NextFunction) {\n    try {\n      let data: userBookingDocument = req.body;\n      orderdata = req.body;\n\n      const { bookingamount } = req.body;\n      const options = {\n        amount: Number(bookingamount * 100),\n        currency: \"INR\",\n      };\n      const order = await RazorpayInstance.orders.create(options);\n      if (order) {\n        res.status(200).json(order);\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // @DESC to verify the payment\n  // @METHOD  post\n  // @PATH /paymentverification\n  async paymentVerification(\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ): Promise<void> {\n    try {\n      const { razorpay_order_id, razorpay_payment_id, razorpay_signature } =\n        req.body;\n      const body = razorpay_order_id + \"|\" + razorpay_payment_id;\n      const expectedSignature = crypto\n        .createHmac(\"sha256\", \"Ki2cAMKxf2JxKvJRQh2Xiq6U\" || \"\")\n        .update(body.toString())\n        .digest(\"hex\");\n      const isAuth = expectedSignature === razorpay_signature;\n\n      if (isAuth && orderdata) {\n        try {\n          const { slotId, agentId, userId, time, date, bookingamount } =\n            orderdata;\n          let payment = await userService.paymentSuccess(orderdata,razorpay_payment_id);\n          if (payment) {\n            res.status(200).json({ success: true, payment });\n          }\n        } catch {\n          throw new Error(\"error updating payment\");\n        }\n      } else {\n        try {\n          const { slotId, agentId, userId, time, date, bookingamount } =\n            orderdata;\n\n          let payment = await userService.paymentfailure(orderdata);\n          if (payment) {\n            res.status(400).json({ success: false, payment });\n          }\n        } catch (error) {\n          console.error(\"Error in orderReceived:\", error);\n        }\n\n        res.status(400).json({ success: false });\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // sending back the agent category details\n  //method get\n  async agentCategory(req: Request, res: Response, next: NextFunction) {\n    try {\n      let category: string = req.query.category as string;\n      let data = await userService.agentCategory(category);\n      if (data) {\n        res.status(200).json(data);\n      } else {\n        res.status(401).json(\"error fetching data\");\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // fetching and sending agents by name\n  // method get\n\n  async getagentByName(req: Request, res: Response, next: NextFunction) {\n    try {\n      let name: string = req.query.name as string;\n\n      let data = await userService.getagentByName(name);\n      if (data) {\n        res.status(200).json(data);\n      } else {\n        res.status(401).json(\"error fetching data\");\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n  // fetching user by id\n  // method get\n\n  async getUserById(req: Request, res: Response, next: NextFunction) {\n    try {\n      let id = req.query.id;\n      const data = await userService.getUserById(id);\n      if (data) {\n        res.status(200).json(data);\n      } else {\n        res.status(401).json(\"error sendinig data\");\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n  // fetching user booking detrails based on status\n  // method get\n\n  async userbookings(req: Request, res: Response, next: NextFunction) {\n    try {\n      let status = req.query.status as string;\n      let id = req.query.id as string;\n      let data = await userService.userbookings(status, id);\n      if (data) {\n        res.status(200).json(data);\n      } else {\n        res.status(401).json(\"error fetching data\");\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  //walletpayment\n  async walletpayment(req: Request, res: Response, next: NextFunction) {\n    try {\n      let data: userBookingDocument = req.body;\n    let paymentdata:any= await userService.walletpayment(data)\n      if (paymentdata) {\n        res.status(200).json(paymentdata);\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n  \n//finding slot to cancel \n\n\n\n  // cancel booking by user and fetching the updated details\n  // method patch\n\n  async cancelbooking(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { id, userid, status,paymentId,slotId }: IcancelBooking = req.body;\n      const cancelslot=await userService.findCancellingSlot(id);\n      const refundamount =Number(parseInt(cancelslot[0].bookingamount)/2)\n      if(paymentId === cancelslot[0].paymentId){\n        RazorpayInstance.payments.refund(paymentId, {\n          amount: refundamount*100,\n          speed: 'optimum', // You can specify the speed of the refund ('optimum' or 'normal')\n          notes: {\n            reason: 'Customer requested a refund'\n          }\n        },async function (error, response) {\n          if (error) {\n            console.error('Refund failed:', error);\n            // Handle refund failure\n          } else {\n            const amountrefund=refundamount.toString()\n\n            let data = await userService.cancelbooking(id, userid, status,amountrefund,slotId);\n            if (data) {\n              res.status(200).json(data);\n            } else {\n              res.status(401).json(\"error fetching data\");\n            }\n            // Handle refund success\n          }\n        });\n      }\n      return\n\n     \n    } catch (error) {\n      next(error);\n    }\n  }\n\n  //updaing user\n  //method put\n\n  async editUser(req: Request, res: Response, next: NextFunction) {\n    try {\n      const folderName = \"Talent Track\";\n\n      if (req.file) {\n      }\n\n      let data = req.body;\n      if (req.file) {\n        const result = await cloudinary.uploader.upload(req.file.path, {\n          public_id: `${folderName}/${req.file.originalname}`,\n        });\n        data.image = result.secure_url;\n      }\n\n      let userdata = await userService.editUser(data);\n      if (userdata) {\n        return res.status(200).json(userdata);\n      } else {\n        return res.status(401).json(\"Error updating data\");\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  //getting new token by passing refresh token\n  // method post\n  async refreshtoken(req:Request,res:Response){\n    try{\n    let data:any=await  userService.refreshtoken(req.body)\n    if(data){\n      return res.status(200).json(data)\n    }\n    }catch(error:any){\n      throw new Error(error)\n    }\n    \n  }\n\n\n  // fetching and sending transaction details\n  // method get\n  async userTransactionHistory(req:Request,res:Response){\n    let userId:string=req.query.userId as string\n    try{\n      let data=await userService.userTransactionHistory(userId)\n      if(data){\n\n\n        res.status(200).json(data)\n      }else{\n        res.status(400).json(\"error fetching transactions\")\n      }\n    }catch(error:any){\n      throw new Error(error)\n    }\n  }\n\n}\n","import nodemailer from \"nodemailer\";\n\nconst generateOtp = () => {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n};\n\nconst generateMail = async (email:string) => {\n    const otp = generateOtp();\n    console.log(\"otp is =>\",otp)\n    const transporter = nodemailer.createTransport({\n        service: 'Gmail',\n        auth: {\n            user: 'bibindasmessi@gmail.com',\n            pass: 'amyq ipki zrkl vmtn',\n        }\n    });\n    \n    // Email data including the OTP\n    const mailOptions = {\n        from: 'bibindasmessi@gmail.com',\n        to: email, // Using the provided email parameter\n        subject: 'Gmail Verification',\n        text: `Your OTP for verification is: ${otp}`, // Include the OTP in the email text\n    };\n    \n    return new Promise((resolve, reject) => {\n        transporter.sendMail(mailOptions, (error, info) => {\n            if (error) {\n                reject(error.message); // Reject the promise with the error message\n            } else {\n                resolve(otp); // Resolve the promise with the OTP\n            }\n        });\n    });\n};\n\nexport default generateMail;\n","import {v2 as cloudinary} from 'cloudinary'\nimport dotenv from 'dotenv';\ndotenv.config()\n\ncloudinary.config({\n    cloud_name: process.env.CLOUD_NAME,\n    api_key: process.env.CLOUD_API_KEY,\n    api_secret: process.env.CLOUD_API_SECRET,\n  });\n  \nexport default cloudinary","import dotenv from 'dotenv'\ndotenv.config()\nimport Razorpay from 'razorpay'\n\nconsole.log(\"key id==>\", process.env.key_id)\nconsole.log(\"key_secret==>\", process.env.key_secret)\n\nconst RazorpayInstance = new Razorpay({\n    key_id:'rzp_test_9CEMr0p0borLvv',\n    key_secret: 'Ki2cAMKxf2JxKvJRQh2Xiq6U'\n})\n\nexport default RazorpayInstance","class CustomError extends Error {\n  statusCode: number;\n  status: string;\n  isOperational: boolean;\n  constructor(message: string, statusCode: any) {\n    super(message);\n\n    this.statusCode = statusCode;\n    this.status = `${statusCode}`.startsWith(\"4\") ? \"fail\" : \"error\";\n    this.isOperational = true;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport default CustomError;\n","//chatName \n//user\n//latestMessage\n//\nimport { Schema, model, Types, ObjectId } from \"mongoose\";\n\ninterface Chat{\n    chatName: string,\n    users: Types.ObjectId,\n    latestMessage: Types.ObjectId\n}\nconst chatSchema = new Schema(\n    {\n        chatName:{\n            type: String\n        },\n        users:{\n            type: Schema.Types.ObjectId,\n            ref: \"userSchema\"\n        },\n        agent:{\n            type: Schema.Types.ObjectId,\n            ref: \"agentSchema\"\n        },\n      \n        latestMessage: {\n            type: Schema.Types.ObjectId,\n            ref: \"Message\",\n          },\n    },\n    {timestamps: true}\n)\n\nconst chatModel = model<Chat>(\"Chat\", chatSchema)\nexport {chatModel, Chat}","import { Schema, model, Types, ObjectId } from \"mongoose\";\n\ninterface Message{\n    sender: Types.ObjectId,\n    content: string,\n    chat: Types.ObjectId,\n    readBy: Types.ObjectId\n}\n\nconst messageSchema = new Schema<Message>(\n    {\n        sender:{\n            type: Schema.Types.ObjectId,\n            ref: \"userSchema\",\n            \n        },\n        content: {\n            type: String,\n            trim: true\n        },\n        chat: {\n            type: Schema.Types.ObjectId,\n            ref:\"Chat\"\n        },\n       \n    },\n    {timestamps: true}\n)\n\nconst messageModel = model<Message>(\"Message\", messageSchema)\n\nexport {Message, messageModel}","import adminModel from \"../../../models/adminmodel\";\nimport usersModel from \"../../../models/usermodel\";\nimport agentModel from \"../../../models/agentmodels\";\nimport { userlog } from \"../dtos/userDto\";\nimport { chatModel } from \"../../../models/chatmodel\";\nimport { messageModel } from \"../../../models/messagemodel\";\nimport { Error } from \"mongoose\";\nimport { ErrorCode } from \"multer\";\n\nexport class chatRepository{\n\n  async accessChat(userId: string, agentId: string) {\n    try {\n        // Check if a chat exists between the given user and agent\n        let isChat = await chatModel.findOne({\n            $and: [\n                { users: userId},\n                { agent: agentId },\n            ],\n        }).populate([\n            { path: \"users\", model: \"userSchema\" },  // Populate userSchema\n             // Populate agentSchema\n        ]).populate([\n          { path: \"agent\", model: \"agentSchema\" },  // Populate userSchema\n           // Populate agentSchema\n      ]).populate(\"latestMessage\")\n\n      console.log(\"isChat==>\",isChat)\n\n        if (isChat) {\n            return isChat;\n        } else {\n            // If no chat exists, create a new one\n            let chatData = {\n                chatName: \"sender\",\n                users: userId,\n                agent:agentId\n            };\n\n            const createdChat = await chatModel.create(chatData);\n            const fullChat = await chatModel.findOne({ _id: createdChat._id })\n                .populate(\n                    { path: \"users\", model: \"userSchema\" },  // Populate userSchema\n                    // Populate agentSchema\n                )  .populate(\n                  { path: \"agent\", model: \"agentSchema\" },  // Populate userSchema\n                  // Populate agentSchema\n              );\n\n              console.log(\"full chat is ==>\", fullChat)\n            return fullChat;\n        }\n    } catch (error:any) {\n        throw new Error(error);\n    }\n}\n\n\n    // getting all the chats\n\n    async fetchChats(userId:string){\n        try {\n           let data= await chatModel.find({ users: userId } )\n          \n              .populate(\"users\")\n              .populate(\"latestMessage\")\n              .sort({ updatedAt: -1 })\n               let results = await usersModel.populate(data, {\n                  path: \"latestMessage.sender\",\n                  select: \"firstName image email\",\n                });\n             return results\n             \n          } catch(error:any){\n            throw new Error(error)\n        }\n    }\n\n    // adding messages\n\n    async sendMessage(content:string,chatId:string,userId:string){\n        var newMessage = {\n            sender: userId,\n            content: content,\n            chat: chatId,\n          };\n          try {\n            var message: any = await messageModel.create(newMessage);\n      \n            message = await message.populate(\"sender\", \"firstName image\")\n            message = await message.populate(\"chat\")\n            message = await usersModel.populate(message, {\n              path: \"chat.users\",\n              select: \"username profilePicture email\",\n            });\n      \n            await chatModel.findByIdAndUpdate(chatId, { latestMessage: message });\n            return message\n          } catch (error:any) {\n      \n            throw new Error(error)\n          }\n    }\n\n    // fetching all messages\n    async allMessages(chatId:string){\n        try {\n            const messages = await messageModel.find({ chat:chatId })\n              .populate(\"sender\", \"firstName image email\")\n              .populate(\"chat\");\n          return messages\n          } catch (error:any) {\n            throw new Error(error)\n          }\n    }\n\n    //agentaccesschat \n\n    async agentAccessChat(agentId:string){\n      try{\n        let isChat = await chatModel.find({\n         \n              \n              agent: agentId \n        \n      }).populate([\n          { path: \"users\", model: \"userSchema\" },  // Populate userSchema\n           // Populate agentSchema\n      ]).populate(\"latestMessage\");\n    return isChat\n      }catch(error:any){\n        throw new Error(error)\n      }\n    }\n\n    // agent messages\n\n async agentsendMessage(content:string,chatId:string,agentId:string){\n      var newMessage = {\n        sender: agentId,\n        content: content,\n        chat: chatId,\n      };\n      try {\n        var message: any = await messageModel.create(newMessage);\n  \n        message = await message.populate(\"sender\", \"firstName image\")\n        message = await message.populate(\"chat\")\n        message = await usersModel.populate(message, {\n          path: \"chat.agent\",\n          select: \"firstName image email\",\n        });\n  \n        await chatModel.findByIdAndUpdate(chatId, { latestMessage: message });\n        return message\n      } catch (error:any) {\n  \n        throw new Error(error)\n      }\n}\n\nasync agentallMessages(chatId:string){\n  try {\n      const messages = await messageModel.find({ chat:chatId })\n        .populate(\"sender\", \"firstName image email\")\n        .populate(\"chat\");\n    return messages\n    } catch (error:any) {\n      throw new Error(error)\n    }\n}\n\n}","import { AnyARecord } from \"dns\";\nimport { UserDto } from \"../dtos/userDto\";\nimport { agentRepository } from \"../repositories/agentRepository\";\nimport { UserRepository } from \"../repositories/userREpository\";\nimport { chatRepository } from \"../repositories/chatRepository\";\n\n\nconst chatrepository=new chatRepository()\n\n\nexport class chatService{\n\n   async accessChat(userId:string,agentId:string){\n\n    try{\n        return await chatrepository.accessChat(userId,agentId)\n\n    }catch(error:any){\n        throw new Error(error)\n    }\n\n   } \n\n   // fetching all the chats \n   async fetchChats(userId:string){\n    try{\n        return await chatrepository.fetchChats(userId)\n    }catch(error:any){\n\n    }\n   }\n\n   // adding message\n\n   async sendMessage(content:string,chatId:string,userId:string){\n    try{\n        return await chatrepository.sendMessage(content,chatId,userId)\n    }catch(error:any){\n        throw new Error(error)\n    }\n   }\n\n   // fetching all of the messages\n\n   async allMessages(chatId:string){\n    try{\n        return await chatrepository.allMessages(chatId)\n    }catch(error:any){\n        throw new Error(error)\n    }\n   }\n\n   async agentAccessChat(agentId:string){\n    try{\n        return await chatrepository.agentAccessChat(agentId)\n    }catch(error:any){\n        throw new Error(error)\n    }\n   }\n// agent chats\n\nasync agentsendMessage(content:string, chatId:string,agentId:string){\n    try{\n        return await chatrepository.agentsendMessage(content,chatId,agentId)\n    }catch(error:any){\n        throw new Error(error)\n    }\n}\n\nasync agentallMessages(chatId:string){\n    try{\n        return await chatrepository.agentallMessages(chatId)\n    }catch(error:any){\n        throw new Error(error)\n    }\n   }\n\n   \n}\n\n\n","import { UserDto } from \"./dtos/userDto\";\nimport { NextFunction, Request, Response } from \"express\";\n\nimport bcrypt from \"bcrypt\";\nimport generateMail from \"../../../../Helper/mailOtp\";\nimport { agentService } from \"./services/agentService\";\nimport cloudinary from \"../../../../Helper/cloudinary\";\nimport { UserService } from \"./services/userServices\";\nimport CustomError from \"../../../../Helper/customError\";\nimport { chatService } from \"./services/chatservice\";\n\nconst chatservice = new chatService();\n\nexport class chatController {\n\nasync accessChat(req: Request, res: Response) {\n    const { userId,agentId } = req.body;\n\n    if (!userId) {\n      return res.status(400).json({ message: 'nouserFound' });\n    }\n\n    \n\n    let data=await chatservice.accessChat(userId,agentId)\n\n    console.log(\"data in controller==>\", data)\n\n   res.status(200).json(data)\n\n\n}\n// getting all the avilable chat \n\nasync fetchChats(req:Request,res:Response){\n    try{\n        let userId:string=req.query.id as string\n        let data:any=await chatservice.fetchChats(userId)\n        if(data){\n            res.status(200).json(data)\n        }else{\n            res.status(401).json(\"error fetching chats\")\n        }\n\n    }catch(error:any){\n        throw new Error(error)\n    }\n}\n   \n// adding messages\n\nasync sendMessage(req:Request,res:Response){\n    try{\n       let {content,chatId,userId}=req.body;\n       let data=await chatservice.sendMessage(content,chatId,userId);\n       res.status(200).json(data)\n\n    }catch(error:any){\n        throw new Error(error)\n    }\n}\n\n// getting all messages\nasync allMessages(req:Request,res:Response){\n    try{\n        let chatId:string=req.query.id as string\n        let data=await chatservice.allMessages(chatId);\n        res.status(200).json(data)\n    }catch(error:any){\n        throw new Error(error)\n    }\n}\n\nasync agentAccessChat(req:Request,res:Response){\n    try{\n        let agentId :string =req.query.agentId as string\n        let data=await chatservice.agentAccessChat(agentId)\n        if(data){\n            res.status(200).json(data)\n        }else{\n            res.status(400).json(\"error fetching data\")\n        }\n    }catch(error:any){\n        throw new Error(error)\n    }\n}\n\n// adding agent messages\nasync agentsendMessage(req:Request,res:Response){\n    try{\n        let {content,chatId,agentId}=req.body;\n        let data=await chatservice.agentsendMessage(content,chatId,agentId);\n        if(data){\n            res.status(200).json(data)\n        }else{\n            res.status(400).json(\"error sending message\")\n        }\n\n    }catch(error:any){\n        throw new Error(error)\n    }\n}\n\nasync agentallMessages(req:Request,res:Response){\n    try{\n        let chatId:string=req.query.id as string\n        let data=await chatservice.agentallMessages(chatId);\n        res.status(200).json(data)\n    }catch(error:any){\n        throw new Error(error)\n    }\n}\n\n}","import { NextFunction } from \"express\";\nimport { Request,Response } from \"express\";\nimport { Secret } from \"jsonwebtoken\";\nimport jwt from \"jsonwebtoken\"\nconst jwtSecretToken: Secret = process.env.jwtsecrettoken as string\n\nconst   userAuth = async(req:Request,res:Response,next:NextFunction)=>{\n   const authHeader = req.headers['authorization'];\n   if(authHeader && authHeader.startsWith('User-Bearer')){\n      const token = authHeader.split(' ')[1];    // Getting token from the header\n\n      try {\n         const decoded = jwt.verify(token,jwtSecretToken,(err,decoded)=>{\n            if(err){\n               res.status(401).json({message:'Unauthorized'});\n            }else{\n             \n               next();\n            }\n         })\n      } catch (error) {\n         res.status(401).json({message:'Unauthorized'});\n      }\n   }else{\n      res.status(401).json({message:'Unauthorized'});\n   }\n}\nexport default userAuth\n","// import { Request } from 'express';\n// import multer, { FileFilterCallback, Multer } from 'multer';\n// import path from 'path';\n\n\n// export  interface ParsedQs {\n//     [key: string]: string | undefined;\n//   }\n\n// export default  multer({\n//   storage: multer.diskStorage({}),\n//   fileFilter: (\n//     req: Request<any, any, any, ParsedQs>,\n//     file: Express.Multer.File,\n//     cb: FileFilterCallback\n//   ) => {\n//     let ext = path.extname(file.originalname);\n//     if (ext !== '.jpg' && ext !== '.jpeg' && ext !== '.png') {\n//       cb(null, false);\n//       return;\n//     }\n//     cb(null, true);\n//   },\n// }) as Multer;\n\nimport multer from 'multer';\nimport fs from 'fs';\n\n// Define the allowed MIME types for image files\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'image/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, file.fieldname + '-' + Date.now() + '.jpg');\n  },\n});\n\nconst upload = multer({ storage: storage });\n\nexport default upload;\n","import express from 'express';\nimport { agetController } from '../agentController';\nconst agentRouter = express.Router();\nimport upload from \"../../../../../Helper/multer\"\nimport { chatController } from '../chatController';\n\nconst agentController=new agetController()\nconst chatcontroller=new chatController()\n\nagentRouter.post(\"/agentregister\",upload.single('image'),agentController.registeragent)\nagentRouter.post(\"/agentlogin\",agentController.agentlogin)\nagentRouter.post(\"/agentverifyotp\",agentController.agentverifyotp);\nagentRouter.post(\"/addpost\",agentController.addpost);\nagentRouter.post(\"/addslot\",agentController.addslot);\nagentRouter.get(\"/availableslots/:id\",agentController.availableslots)\nagentRouter.get(\"/bookedslots\",agentController.bookedslots)\nagentRouter.delete(\"/deletingslot\",agentController.deletingslot)\nagentRouter.get(\"/agentDetails\",agentController.agentDetails)\nagentRouter.get(\"/getAllSlots\",agentController.getAllSlots)\nagentRouter.get(\"/slotDetailsByOption\",agentController.slotDetailsByOption)\nagentRouter.delete(\"/agentslotcancell\",agentController.agentslotcancell);\nagentRouter.get(\"/slotbookingchangeStatus\",agentController.slotbookingchangeStatus)\nagentRouter.put(\"/editAgent\",upload.single('image'),agentController.editAgent)\nagentRouter.get(\"/getAllSlotDetails\",agentController.getAllSlotDetails)\n\n//chat routes\nagentRouter.get(\"/agentAccessChat\",chatcontroller.agentAccessChat)\nagentRouter.get(\"/allMessages\",chatcontroller.agentallMessages)\nagentRouter.post(\"/agentsendMessage\",chatcontroller.agentsendMessage)\n\nexport default agentRouter","import { UserDto } from \"./dtos/userDto\";\nimport { NextFunction, Request, Response } from \"express\";\n\nimport bcrypt from \"bcrypt\";\nimport generateMail from \"../../../../Helper/mailOtp\";\nimport { agentService } from \"./services/agentService\";\nimport cloudinary from \"../../../../Helper/cloudinary\";\nimport { UserService } from \"./services/userServices\";\nimport CustomError from \"../../../../Helper/customError\";\n\n// creating an instance of a agentservice class\n\nconst agentservice = new agentService();\n\nexport class agetController {\n  //agent resgistration\n  // method post\n\n  async registeragent(req: Request, res: Response, next: NextFunction) {\n    try {\n      const folderName = \"Talent Track\";\n      const agentData: UserDto = req.body;\n\n      const agentdetails = await agentservice.agetDetails(agentData);\n      if (agentdetails.length > 0) {\n        return res.status(401).json(\"agent already exists\");\n      } else {\n        let otp = await generateMail(agentData.email);\n        agentData.otp = otp as number;\n      }\n      const password = await bcrypt.hash(agentData.password, 10);\n      agentData.password = password;\n      if (req.file) {\n        const result = await cloudinary.uploader.upload(req.file.path, {\n          public_id: `${folderName}/${req.file.originalname}`,\n        });\n        agentData.image = result.secure_url;\n      }\n      const newUser = await agentservice.registeragent(agentData);\n      res.status(201).json(newUser);\n    } catch (error: any) {\n      next(error);\n    }\n  }\n\n  // agent login\n  //method post\n\n  async agentlogin(req: Request, res: Response, next: NextFunction) {\n    try {\n      const data = req.body;\n      const userdata = await agentservice.agentlogin(data);\n      if (!userdata) {\n        // return res.status(401).json(\"invalid credentials\");\n        throw new CustomError(\"Invalid credentials\", 401);\n      } else {\n        res.status(200).json(userdata);\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  // verifying agent otp\n  // method post\n\n  async agentverifyotp(req: Request, res: Response, next: NextFunction) {\n    try {\n      const data = req.body;\n      const verifyuser = await agentservice.verifyotp(data.email);\n      if (verifyuser[0].otp == data.otp) {\n        const succesverify = await agentservice.successVerify(data.email);\n        res.status(201).json(\"successfully verified\");\n      } else {\n        res.status(404).json(\"entered otp doesnt match plaese try again\");\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  // adding post from agent\n  // method post\n\n  async addpost(req: Request, res: Response, next: NextFunction) {\n    try {\n      res.status(200).json(req.body);\n    } catch (error) {\n      next(error);\n    }\n  }\n  // adding slot from agent\n  // method post\n\n  async addslot(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { date, time, id } = req.body;\n      const data = {\n        agentId: id,\n        time: time,\n        date: date,\n      };\n      const slot = await agentservice.addslot(data);\n      if (slot) {\n        res.status(200).json(slot);\n      } else {\n        res.status(401).json(\"failure adding slot\");\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // method get\n  // fetching available slots\n\n  async availableslots(req: Request, res: Response, next: NextFunction) {\n    try {\n      let id = req.params.id as string;\n      let data = await agentservice.availableslots(id);\n      if (data) {\n        res.status(200).json(data);\n      } else {\n        res.status(401).json(\"error fetching data\");\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // fetching booked slots \n  async bookedslots(req: Request, res: Response, next: NextFunction) {\n    try {\n      let id = req.query.agentId as string;\n      let data = await agentservice.bookedslots(id);\n      if (data) {\n        res.status(200).json(data);\n      } else {\n        res.status(401).json(\"error fetching data\");\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // deleting a slot and sending back the available slots\n  // method delete\n\n  async deletingslot(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { id, slotid } = req.query as any;\n      let data = await agentservice.deletingslot(slotid, id);\n      if (data) {\n        res.status(200).json(data);\n      } else {\n        res.status(401).json(\"error deleting a slot\");\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async agentDetails(req: Request, res: Response, next: NextFunction) {\n    try {\n      let id: string = req.query.id as string;\n      let data = await agentservice.agentDetails(id);\n      if (data) {\n        res.status(200).json(data);\n      } else {\n        res.status(401).json(\"error fetching data\");\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  //fetching all the booked slots\n  // method get\n  async getAllSlots(req: Request, res: Response, next: NextFunction) {\n    try {\n      let id = req.query.id as string;\n      let data = await agentservice.getAllSlots(id);\n      if (data) {\n        res.status(200).json(data);\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  //fetching details by slot status\n  // method get\n\n  async slotDetailsByOption(req: Request, res: Response, next: NextFunction) {\n    try {\n      let { id, data } = req.query as any;\n      let datas = await agentservice.slotDetailsByOption(id, data);\n      if (datas) {\n        res.status(200).json(datas);\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // fetcching fdata from the repository after deleting a slot\n  //  method delete\n\n  async agentslotcancell(req: Request, res: Response, next: NextFunction) {\n    try {\n      let { slotId, agentId } = req.query as any;\n      let datas = await agentservice.agentslotcancell(slotId, agentId);\n      if (datas) {\n        res.status(200).json(datas);\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // fetching slots after updationg the status\n  // method get\n\n  async slotbookingchangeStatus(\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      let { status, slotId, agentId } = req.query as any;\n      let data: any = await agentservice.slotbookingchangeStatus(\n        slotId,\n        status,\n        agentId\n      );\n      if (data) {\n\n        console.log(\"slot is==>\", data)\n        res.status(200).json(data);\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  //updating agent and fetching agent details\n  //method put\n\n  async editAgent(req: Request, res: Response, next: NextFunction) {\n    const folderName = \"Talent Track\";\n    try {\n      let data = req.body;\n      if (req.file) {\n        const result = await cloudinary.uploader.upload(req.file.path, {\n          public_id: `${folderName}/${req.file.originalname}`,\n        });\n        data.image = result.secure_url;\n      }\n      let agent = await agentservice.editAgent(data);\n      if (agent) {\n        res.status(200).json(agent);\n      } else {\n        res.status(401).json(\"failed to fetch data\");\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // collecting userbookin details of specific agent \n  //method get \n  async getAllSlotDetails(req:Request,res:Response,next: NextFunction){\n    try {\n      let { agentId } = req.query as any;\n      let datas = await agentservice.getAllSlotDetails(agentId);\n      if (datas) {\n        res.status(200).json(datas);\n\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n","import { comparePass } from \"../../../../../Helper/passwordhash\";\nimport agentModel from \"../../../models/agentmodels\";\nimport userBookingModel from \"../../../models/userbooking\";\nimport addagentslot from \"../../../models/agentaddslot\"\nimport jwt from 'jsonwebtoken';\nimport dotenv from \"dotenv\"\n\n\ndotenv.config()\nimport { UserDto } from \"../dtos/userDto\";\nimport upload from '../../../../../Helper/multer';\nimport transactionmodel from \"../../../models/transactionmodel\";\nimport usersModel from \"../../../models/usermodel\";\n\n\nexport class agentRepository{\n    \n    async create(agentData: any): Promise<any> {\n        try {\n          const uploads=upload.single('image')\n          return await agentModel.create(agentData);\n        } catch (error) {\n          throw new Error(\"Could not create agent\");\n        }\n      }\n      async agentDetails(agentData: any): Promise<any> {\n        try {\n          return await agentModel.find({email:agentData.email});\n        } catch (error) {\n          throw new Error(\"Could not create agent\");\n        }\n      }\n      async agentlogin(data: any): Promise<any> {\n        try {\n          let info: any = await agentModel.findOne({ email: data.email });\n         if(!info){\n          return null\n         }\n    \n          let isValidPassword = await comparePass(data.password, info.password);\n          if (!isValidPassword) {\n            return \"password mismatch\";\n            \n          }else{\n            if(info.is_blocked){\n              return \"you are blocked by the admin\"\n             \n              \n            }\n            const token=  jwt.sign(info.email,\"secretKey\")\n            const accesseduser={\n             \n              agenttoken:token,\n              userdetails:{\n                id:info._id,\n                name:info.firstName,\n                email:info.email,\n                image:info.image,\n                verified:info.is_verified,\n                category:info.category,\n                role:info.role\n              }\n             \n            }\n            return accesseduser\n          }\n        } catch (error: any) {\n          throw new Error(\"Could not find user\");\n        }\n      }\n      async verifyotp(email:string){\n        try{\n          let userdata=await agentModel.find({email:email})\n          return userdata\n        }catch(error:any){\n          throw new Error(error.message)\n        }\n      }\n      async successVerify(email:string){\n        try{\n          let userdata=await agentModel.find({email:email})\n        //  userdata[0]. is_verified=true;\n         const updatedUser = await userdata[0].save();\n         \n        }catch(error:any){\n          throw new Error(error.message)\n        }\n      }\n      \n//agent adding posts\nasync addpost(data:any){\n  try{\n    const ref=data.agentId.ref\n  }catch{\n    throw new Error(\"error adding posts\")\n  }\n}\n\n//slot add \nasync addslot(data:any){\n  try{\n    let slot=await addagentslot.find({agentId:data.agentId})\n   \n      await addagentslot.create(data);\n    \n  \n   let total=await addagentslot.find({agentId:data.agentId,booked:false})\n    return total\n  }catch{\n    throw new Error(\"failure adding slot\")\n  }\n \n}\n\n//fetching avilable slots to display in the agent side tro showvase for cancelling;\nasync availableslots(id:string){\n  try{\n    let availableslots=await addagentslot.find({agentId:id,booked:false,date:{$gt:new Date()}}).populate(\"agentId\")\n    return availableslots\n\n  }catch{\n    throw new Error(\"error fetching data\")\n  }\n}\n\n//fetching booked slots\nasync bookedslots(id:string){\n  try{\n    let confirmedSlots = await addagentslot.find({ \n      agentId: id,\n      booked: true,\n      $or: [\n          { status: 'Confirmed' },\n          { status: 'consulted' }\n      ]\n  }).populate(\"agentId\").populate(\"bookedUserId\");\n  \n    return confirmedSlots\n\n  }catch{\n    throw new Error(\"error fetching data\")\n  }\n}\n\n\n// deleting a slot a  slot and sending back the remaining slot\nasync deletingslot(slotid:string,id:string){\n  try{\n    await addagentslot.deleteOne({_id:slotid});\n    let totalslot=await addagentslot.find({agentId:id,booked:false});\n    return totalslot\n  }catch{\n    throw new Error(\"error deleting a slot\")\n  }\n}\n\nasync getAgentdetails(id:string){\n  try{\n    \n    return await agentModel.find({_id:id});\n    \n  }catch{\n    throw new Error(\"error deleting a slot\")\n  }\n}\n\n//fetching all the slots to display it in the agent side\n\nasync getAllSlots(id:string){\n  try{\n    let data= await addagentslot.find({agentId:id}).populate('bookedUserId').exec()\n    return data\n  }catch{\n    throw new Error(\"error\")\n  }\n}\n\n//fetching slot details by status type\n\nasync slotDetailsByOption(id:string,status:string){\n  try {\n       \n    if (status === 'All') {\n        let dta= await addagentslot.find({ agentId: id }).populate('bookedUserId').exec();\n      \n        return dta\n        \n    } else {\n        let data = await addagentslot.find({ agentId: id, status: status }).populate('bookedUserId').exec();\n        return data;\n    }\n\n} catch (error) {\n    throw new Error(\"error fetching data\");\n}\n}\n\n//getting slots after cancelling one\n\nasync agentslotcancell(slotid:string,agentId:string){\n  try{\n    await addagentslot.deleteOne({_id:slotid})\n  let dta= await addagentslot.find({ agentId: agentId , status:'pending'}).populate('bookedUserId').exec();\n  return dta\n  }catch{\n    throw new Error(\"error fetching data\")\n  }\n  \n\n}\n\n// updating booking status that is user is rejection or coonsulted option is clicking\nbookingamount:number=0\nasync  slotbookingchangeStatus(slotId:string,status:string,agentId:string){\ntry{\n \n  let datas:any= await userBookingModel.findOne({slotId:slotId});\n  let {userId,bookingamount}=datas\n  bookingamount=bookingamount\n  if(status=='agent cancelled'){\n  await userBookingModel.updateOne({slotId:slotId},{$set:{status:status}});\n  await addagentslot.updateOne({_id:slotId},{$set:{status:status}})\n    await transactionmodel.create({userId:userId,agentId:agentId,refundamount:bookingamount})\n    let user:any=await usersModel.findOne({_id:userId})\n    let updatedamount=user.wallet+Number(bookingamount)\n    await usersModel.updateOne({_id:userId},{$set:{wallet:updatedamount}})\n    let data=await addagentslot.find({agentId:agentId,status:'Confirmed'}).populate(\"bookedUserId\")\n\n  return data\n  }\n  let amount=Number(bookingamount*2/100*10)\n  await userBookingModel.updateOne({slotId:slotId},{$set:{status:status}});\n  await addagentslot.updateOne({_id:slotId},{$set:{status:status,adminpaidAmount:amount}})\n  let data=await addagentslot.find({agentId:agentId,status:\"consulted\"}).populate(\"bookedUserId\")\n  return data\n\n}catch{\nthrow new Error(\"error fetching value\")\n}\n}\n\n//editing agent profile\n\nasync editAgent(data:any){\n  try{\n    if(data.image){\n      let datas=await agentModel.updateOne({_id:data.agentId},{$set:{firstName:data.firstName,lastName:data.lastName,category:data.category\n        ,experience:data.experience,clubConnections:data.clubConnections,image:data.image\n      }})\n      let agent=await agentModel.find({_id:data.agentId});\n      return agent\n    }else{\n      let datas=await agentModel.updateOne({_id:data.agentId},{$set:{firstName:data.firstName,lastName:data.lastName,category:data.category\n        ,experience:data.experience,clubConnections:data.clubConnections,\n      }})\n      let agent=await agentModel.find({_id:data.agentId});\n      return agent\n    }\n    \n  }catch{\n    throw new Error(\"error fetching data\")\n  }\n \n}\n\n// get all slot details from userslotbooking \nasync getAllSlotDetails(id:string){\n  try{\n    let data=await userBookingModel.find({agentId:id}).populate('agentId')\n    return data\n  }catch{\n    throw new Error(\"error fetching data\")\n  }\n}\n\n}","import { AnyARecord } from \"dns\";\nimport { UserDto } from \"../dtos/userDto\";\nimport { agentRepository } from \"../repositories/agentRepository\";\nimport { UserRepository } from \"../repositories/userREpository\";\n\n\nconst agentrepository=new agentRepository()\n\nexport class agentService{\n\n async  registeragent(agentData:any):Promise<any>{\n    try{\n        return agentrepository.create(agentData)\n    }catch (error:any){\n        throw new Error (\"could not register agent\")\n    }\n}\nasync agentlogin(data:any){\n    try{\n        return agentrepository.agentlogin(data)\n\n    }catch(error){\n        throw new Error(\"credentials are wrong\")\n    }\n}\n\nasync agetDetails(agentData:UserDto):Promise<any>{\n    try{\n        return agentrepository.agentDetails(agentData)\n    }catch (error:any){\n        throw new Error (\"could not register agent\")\n    }\n}\nasync verifyotp(email:string){\n    try{\n      return await agentrepository.verifyotp(email)\n    }catch(error){\n      throw new Error('Could not get user');\n    }\n  }\n  async successVerify(email:string){\n    try{\n      return await agentrepository.successVerify(email)\n    }catch(error){\n      throw new Error('Could not get user');\n    }\n  }\n  async addslot(data:any){\n    try{\n      return await agentrepository.addslot(data)\n    }catch{\n      throw new Error(\"failure adding slot\")\n    }\n  }\n  // sending data fetched from the repository to controller\n\n  async availableslots(id:string){\n    try{\n      return await agentrepository.availableslots(id)\n    }catch{\n      throw new Error(\"failure fetching data\")\n    }\n  }\n\n  // fetching booked slots\n  async bookedslots(id:string){\n    try{\n      return await agentrepository.bookedslots(id)\n    }catch{\n      throw new Error(\"failure fetching data\")\n    }\n  }\n  //deleting a slot and sending back the remaining slot\n\n  async deletingslot(slotid:string,id:string){\n    try{\n      return await agentrepository.deletingslot(slotid,id)\n    }catch{\n      throw new Error(\"error deleting a a slot\")\n    }\n  }\n async agentDetails(id:string){\n    try{\n      return await agentrepository.getAgentdetails(id)\n    }catch{\n      throw new Error(\"error fetching data\")\n    }\n }\n\n //fetching all booked slots \n async getAllSlots(id:string){\n  try{\n    return  await agentrepository.getAllSlots(id)\n  }catch{\n    throw new Error(\"error fetching slots\")\n  }\n }\n\n //fetching slot by status type \n async slotDetailsByOption(id:string,status:string){\n  try{\n    return await agentrepository.slotDetailsByOption(id,status)\n  }\n  catch{\n    throw new Error(\"error fetching data\")\n  }\n }\n\n //fetching data from userRouter after deletiong slot \n async agentslotcancell(slotId:string,agentId:string){\n  try{\n    return await agentrepository.agentslotcancell(slotId,agentId)\n  }\n  catch{\n    throw new Error(\"error fetching data\")\n  }\n }\n\n // sending data after updating slots \n async slotbookingchangeStatus(slotId:string,status:string,agentId:string){\n  try{\n    return await agentrepository.slotbookingchangeStatus(slotId,status,agentId)\n  }catch{\n    throw new Error(\"error fetching data\")\n  }\n }\n //after upading agent sending agent details\n\n async editAgent(data:any){\n  try{\n   return await agentrepository.editAgent(data)\n  }catch{\n    throw new Error(\"error updatinf agent\")\n  }\n }\n // collecting userbooking details based on agent \n async getAllSlotDetails(id:string){\n  try{\n    return await agentrepository.getAllSlotDetails(id)\n   }catch{\n     throw new Error(\"error updatinf agent\")\n   }\n }\n}","import express from 'express';\nimport { agetController } from '../agentController';\nimport { adminController } from '../adminController';\nimport adminAuth from '../../../../../midlewares/adminauth';\nconst adminRouter = express.Router();\n\n const admincontroller=new adminController()\n\n\nadminRouter.post(\"/adminlogin\",admincontroller.adminlogin)\nadminRouter.get(\"/getuserdata\",adminAuth,admincontroller.getuserdata)\nadminRouter.get(\"/getagentdata\",adminAuth,admincontroller.getagentdata)\nadminRouter.post(\"/blokUser\",adminAuth,admincontroller.blokUser);\nadminRouter.post(\"/blokagent\",adminAuth,admincontroller.blokagent)\nadminRouter.post(\"/agentVerify\",adminAuth,admincontroller.verifyagent)\nadminRouter.get(\"/searchAgents\",admincontroller.searchAgents)\nadminRouter.get(\"/searchUser\",admincontroller.searchUser)\n adminRouter.post(\"/adddefaultslot\",admincontroller.addDefaultSlots)\nadminRouter.get(\"/AllSlots\",admincontroller.AllSlots)\nadminRouter.get(\"/confirmedslots\",admincontroller.confirmedslots)\n\n\nexport default adminRouter","import mongoose, { Document, Model } from 'mongoose';\nexport interface AdminDocument extends Document {\n   \n    email: string;\n    password:string;\n  \n\n}\n\nconst adminSchema = new mongoose.Schema<AdminDocument>({\n  \n    email: {\n      type: String,\n    },\n    password: {\n      type: String,\n    },\n   \n\n  });\n  \n  const  adminModel : Model<AdminDocument>= mongoose.model(\"adminSchema\", adminSchema);\n  export default adminModel","import adminModel from \"../../../models/adminmodel\";\nimport usersModel from \"../../../models/usermodel\";\nimport agentModel from \"../../../models/agentmodels\";\nimport { userlog } from \"../dtos/userDto\";\nimport addagentslot from \"../../../models/agentaddslot\";\nexport class adminRepository{\n    async adminlogin(data:userlog){\n        try{\n            return adminModel.find({email:data.email})\n        }catch(error:any){\n            throw new Error(\"invalid credentials\")\n        }\n        \n    }\n    async getuserdata(){\n        try{\n            return usersModel.find()\n        }catch(error:any){\n            throw new Error(\"invalid \")\n        }\n    }\n    async getagentdata(){\n        try{\n            return agentModel.find()\n        }catch(error:any){\n            throw new Error(\"invalid \")\n        }\n    }\n    async blockuser(email:any){\n        try{\n            const data:any=await usersModel.findOne({email:email})\n            if(data.is_blocked){\n                data.is_blocked=false;\n                data.save();\n                return true\n            }else{\n                data.is_blocked=true;\n                data.save();\n                return true\n            }\n        }catch (error){\n            throw new Error(\"invalid\")\n        }\n    }\n    async blockagent(email:any){\n        try{\n            const data:any=await agentModel.findOne({email:email})\n            if(data.is_blocked){\n                data.is_blocked=false;\n                data.save();\n                return true\n            }else{\n                data.is_blocked=true;\n                data.save();\n                return true\n            }\n        }catch (error){\n            throw new Error(\"invalid\")\n        }\n    }\n    async verifyagent(email:any){\n        try{\n            const data:any=await agentModel.findOne({email:email})\n            if(data.is_verified){\n                data.is_verified=false;\n                data.save();\n                return true\n            }else{\n                data.is_verified=true;\n                data.save();\n                return true\n            }\n        }catch (error){\n            throw new Error(\"invalid\")\n        }\n    }\n\n    async  searchAgents(name: string) {\n        try {\n            // Construct the regular expression using the name parameter\n            const nameRegex = new RegExp(`^${name}`);\n    \n            // Use the regular expression to find agents\n            const agents = await agentModel.find({ firstName: nameRegex });\n            \n            return agents;\n        } catch (error:any) {\n            throw new Error(error);\n        }\n    }\n\n    async searchUser(name:string){\n        try {\n            // Construct the regular expression using the name parameter\n            const nameRegex = new RegExp(`^${name}`);\n    \n            // Use the regular expression to find agents\n            const agents = await usersModel.find({ firstName: nameRegex });\n            \n            return agents;\n        } catch (error:any) {\n            throw new Error(error);\n        }\n    }\n    \n    async  AllSlots() {\n        try {\n            let data= await addagentslot.find().populate('bookedUserId').populate(\"agentId\")\n            return data\n        } catch (error: any) {\n            throw new Error(error);\n        }\n    }\n\n   \n    \n    async  addDefaultSlots(data: any) {\n        try {\n            const { startdate, enddate, time, agentId } = data;\n            \n            // Convert startdate and enddate to Date objects\n            const startDate = new Date(startdate);\n            const endDate = new Date(enddate);\n    \n            // Loop through each date within the provided range\n            for (let currentDate = new Date(startDate); currentDate.getTime() <= endDate.getTime(); currentDate.setDate(currentDate.getDate() + 1)) {\n    \n                // Construct data for the current date\n                const dataForCurrentDate = {\n                    agentId: agentId,\n                    date: new Date(currentDate), // Create a new Date object to avoid mutation\n                    time: time,\n                    booked: false,\n                    bookedUserId: null, // Assuming no booking initially\n                    // Add any other properties to the data object as needed\n                };\n    \n                // Create a document for the current date\n                let res = await addagentslot.create(dataForCurrentDate);\n            }\n    \n            return \"successfully added\";\n        } catch (error:any) {\n            throw new Error(error);\n        }\n    }\n    \n    // all confirmedslots\n\n    async  confirmedslots() {\n        try {\n            let data= await addagentslot.find({booked:true}).populate('bookedUserId').populate(\"agentId\")\n            return data\n        } catch (error: any) {\n            throw new Error(error);\n        }\n    }\n    \n}","import { userlog } from \"../dtos/userDto\";\nimport { adminRepository } from \"../repositories/adminRepository\";\n\n\nconst adminrepository=new adminRepository()\n\n\nexport class adminService{\n    async adminlogin(data:userlog){\n        try{\n            return adminrepository.adminlogin(data)\n        }catch(error){\n            throw new Error(\"inavalid\")\n        }\n        \n    }\n    async getuserdata(){\n        try{\n            return adminrepository.getuserdata()\n        }catch(error){\n            throw new Error(\"invalid\")\n        }\n        \n    }\n    async getagentdata(){\n        try{\n            return adminrepository.getagentdata()\n        }catch(error){\n            throw new Error(\"invalid\")\n        }\n        \n    }\n    async blockuser(email:any){\n        try{\n            return adminrepository.blockuser(email)\n\n        }catch(error){\n            throw new Error(\"invalid\")\n        }\n    }\n    async blockagent(email:any){\n        try{\n            return adminrepository.blockagent(email)\n\n        }catch(error){\n            throw new Error(\"invalid\")\n        }\n    }\n    async verifyagent(email:any){\n        try{\n            return adminrepository.verifyagent(email)\n\n        }catch(error){\n            throw new Error(\"invalid\")\n        }\n    }\n\n    async searchAgents(name:string){\n        try{\n            return  await  adminrepository.searchAgents(name)\n        }catch(error:any){\n            throw new Error(error)\n        }\n    }\n    async searchUser(name:string){\n        try{\n            return  await  adminrepository.searchUser(name)\n        }catch(error:any){\n            throw new Error(error)\n        }\n    }\n\n    async AllSlots(){\n        try{\n             return await adminrepository.AllSlots()\n\n        }catch(error:any){\n            throw new Error(error)\n    }\n}\n\nasync addDefaultSlots(data:any){\n    try{\n        return await adminrepository.addDefaultSlots(data)\n\n   }catch(error:any){\n       throw new Error(error)\n}\n}\nasync confirmedslots(){\n    try{\n         return await adminrepository.confirmedslots()\n\n    }catch(error:any){\n        throw new Error(error)\n}\n}\n}\n","import { Response, Request } from \"express\";\nimport { adminService } from \"./services/adminService\";\nimport { userlog } from \"./dtos/userDto\";\nimport jwt from \"jsonwebtoken\"\nimport { Secret } from \"jsonwebtoken\";\nimport { config } from \"dotenv\";\nimport { agentService } from \"./services/agentService\";\n\nconst secret=process.env.jwtsecrettoken as string\n// creating an instance of the adminservice class\nconst adminservice = new adminService();\n\n// creating adminController\nexport class adminController {\n  async adminlogin(req: Request, res: Response) {\n    let userlogdata: userlog = req.body;\n    const loginresult = await adminservice.adminlogin(userlogdata);\n    try {\n      if (loginresult[0]) {\n        if (loginresult[0].password == userlogdata.password) {\n         let admintoken=jwt.sign(userlogdata.email,secret)\n          res.status(200).json(admintoken);\n        } else {\n          res.status(401).json(\"invalid credentials\");\n        }\n      } else {\n        res.status(401).json(\"invalid credentials\");\n      }\n    } catch (error) {}\n  }\n\n  // getting userdata and sending it to the client side\n  // method get\n\n  async getuserdata(req: Request, res: Response) {\n    try {\n      const userdatadata = await adminservice.getuserdata();\n      if (userdatadata) {\n        res.status(200).json(userdatadata);\n      }\n    } catch (error) {\n      throw new Error(\"invalid\");\n    }\n  }\n\n  // sending agent details to the client side\n  // method get\n\n  async getagentdata(req: Request, res: Response) {\n    try {\n      const data = await adminservice.getagentdata();\n      if (data) {\n        res.status(200).json(data);\n\n      }\n    } catch (error) {\n      throw new Error(\"invalid\");\n    }\n  }\n\n  // blocking user\n  // method post\n\n  async blokUser(req: Request, res: Response) {\n    try {\n      const data = req.body;\n      const userdata = await adminservice.blockuser(data.email);\n      if (userdata) {\n        res.status(200).json(\"success\");\n      }\n    } catch (error) {\n      throw new Error(\"invalid\");\n    }\n  }\n\n  // blocking agent \n  // method patch\n\n  async blokagent(req: Request, res: Response) {\n    try {\n      const data = req.body;\n      const userdata = await adminservice.blockagent(data.email);\n      if (userdata) {\n        res.status(200).json(\"success\");\n      }\n    } catch (error) {\n      throw new Error(\"invalid\");\n    }\n  }\n\n  // verifying agent \n  // method post\n\n  async verifyagent(req: Request, res: Response) {\n    try {\n      const data = req.body;\n      const userdata = await adminservice.verifyagent(data.email);\n      if (userdata) {\n        res.status(200).json(\"success\");\n\n      }\n    } catch (error) {\n      throw new Error(\"invalid\");\n    }\n  }\n\n  async searchAgents(req:Request,res:Response){\n    try{\n      let name=req.query.name as string\n      let agentdata=await adminservice.searchAgents(name)\n      if(agentdata){\n        res.status(200).json(agentdata)\n      }\n    }catch(error:any){\n      throw new Error(error)\n    }\n   \n  }\n  async searchUser(req:Request,res:Response){\n    try{\n      let name=req.query.name as string\n      let agentdata=await adminservice.searchUser(name)\n      if(agentdata){\n        res.status(200).json(agentdata)\n      }\n    }catch(error:any){\n      throw new Error(error)\n    }\n   \n  }\n\n  async AllSlots(req:Request,res:Response){\n    try{\n      \n      let slots=await adminservice.AllSlots()\n      if(slots){\n        res.status(200).json(slots)\n\n      }\n    }catch(error:any){\n      throw new Error(error)\n    }\n   \n  }\n  async addDefaultSlots(req:Request,res:Response){\n    try{\n      let data=req.body\n      let successMessage:string=await adminservice.addDefaultSlots(data)\n      if(successMessage){\n        res.status(200).json(successMessage)\n      }\n    }catch(error:any){\n      throw new Error(error)\n    }\n   \n  }\n  async confirmedslots(req:Request,res:Response){\n    try{\n      \n      let slots=await adminservice.confirmedslots()\n      if(slots){\n        res.status(200).json(slots)\n\n        \n      }\n    }catch(error:any){\n      throw new Error(error)\n    }\n   \n  }\n}\n","import { NextFunction } from \"express\";\nimport { Request,Response } from \"express\";\nimport { Secret } from \"jsonwebtoken\";\nimport jwt from \"jsonwebtoken\"\nconst secret:Secret=process.env.jwtsecrettoken as string\nconst   adminAuth = async(req:Request,res:Response,next:NextFunction)=>{\n   const authHeader = req.headers['authorization'];\n   if(authHeader && authHeader.startsWith('Admin-Bearer')){\n      const token = authHeader.split(' ')[1];    // Getting token from the header\n\n      try {\n         const decoded = jwt.verify(token, secret,(err,decoded)=>{\n            console.log(\"decoded data is ==>\",decoded)\n            if(err){\n               res.status(401).json({message:'Unauthorized'});\n            }else{\n             \n               next();\n            }\n         })\n      } catch (error) {\n         res.status(401).json({message:'Unauthorized'});\n      }\n   }else{\n      res.status(401).json({message:'Unauthorized'});\n   }\n}\nexport default adminAuth\n","import { Request, Response, NextFunction } from \"express\";\nimport CustomError from \"../Helper/customError\";\n\nconst errorHandlingMidleware = (\n  err: CustomError,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  console.log(err);\n  err.statusCode = err.statusCode || 500;\n  err.status = err.status || \"error\";\n  if (err.statusCode === 404) {\n    res\n      .status(err.statusCode)\n      .json({ errors: err.status, errorMessage: err.message });\n  } else {\n    res.status(err.statusCode).json({\n      status: err.status,\n      message: err.message,\n    });\n  }\n};\n\nexport default errorHandlingMidleware;"],"mappings":"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","names":["import_express","import_dotenv","dotenv","mongoose","import_mongoose","mongoose","import_mongoose","mongoose","import_mongoose","mongoose","import_mongoose","mongoose","bcrypt","import_dotenv","import_mongoose","mongoose","dotenv","jwt","email","email","import_bcrypt","email","nodemailer","import_dotenv","dotenv","cloudinary","import_dotenv","dotenv","Razorpay","bcrypt","crypto","import_mongoose","import_mongoose","import_mongoose","import_jsonwebtoken","jwtSecretToken","jwt","decoded","multer","express","import_express","import_bcrypt","import_jsonwebtoken","import_dotenv","dotenv","jwt","email","data","email","bcrypt","express","chatcontroller","import_express","import_mongoose","mongoose","email","email","import_jsonwebtoken","jwt","import_jsonwebtoken","secret","jwt","decoded","express","dotenv","express","http","SocketIOServer","cors","path"]}